// 📦 작업지시서: 이미지 저장방식 리팩토링 및 성능 최적화

// 🎯 최종 목표
// - Base64 방식 제거 → 파일(.webp) 기반 저장 방식으로 통일
// - 이미지 업로드 시 자동으로 썸네일(.webp) 생성
// - 이미지 로딩 속도 향상 (1초 이내)
// - 향후 메뉴 추가 시에도 재사용 가능한 통합 API/저장 시스템 구성

// ✅ 1. 이미지 저장방식 구조 개편

// 📌 요구사항
// - AI 생성 이미지도 `/uploads/` 폴더에 `.webp` 포맷으로 저장
// - DB에는 `image_url`과 `thumbnail_url`만 저장 (Base64 금지)
// - 기존 Base64 저장된 항목은 `.webp` 파일로 변환 후 DB 필드 업데이트

// 📂 저장 경로 예시
// - uploads/
//   - full/2025/05/27/abcdef.webp
//   - thumbnails/2025/05/27/abcdef_thumb.webp

// 🛠 작업 항목
// - [ ] `saveImageFromBase64()` → 파일 저장 방식으로 변경 (.webp로 저장)
// - [ ] AI 이미지 생성 API → Base64 저장 제거 → `.webp` 저장 방식으로 통합
// - [ ] 기존 DB Base64 이미지 → `.webp` 파일 변환 및 DB 업데이트 스크립트 생성

// ✅ 2. 썸네일 자동 생성 시스템 구축

// 📌 요구사항
// - 이미지 업로드 시 썸네일(`_thumb.webp`)을 자동 생성
// - 썸네일 파일은 `uploads/thumbnails/` 하위에 저장
// - DB에는 `thumbnail_url` 자동 저장

// 🛠 작업 항목
// - [ ] `uploadImage()` 함수 수정 → 이미지 저장 직후 썸네일 생성 로직 추가
// - [ ] `sharp` 또는 `imagemin-webp` 모듈을 사용하여 300px 너비 기준 썸네일 생성
// - [ ] 썸네일 없던 기존 이미지에 대해 일괄 생성 스크립트 작성

// ✅ 3. 이미지 로딩 성능 최적화

// 📌 요구사항
// - 프론트엔드에서 항상 썸네일 우선 로딩 (`thumbnail_url` → `image_url` 순)
// - ImageCard.tsx, gallery.tsx 등 이미지 표시 컴포넌트에 반영
// - Base64가 들어오지 않도록 API 응답에서 제거

// 🛠 작업 항목
// - [ ] 프론트 코드에서 `const imageUrl = thumbnail_url || image_url`로 통일
// - [ ] `/api/images` 응답 구조 수정 → Base64 필드 제거
// - [ ] `lazy-loading` 및 `skeleton loader` 추가 (선택적 적용)

// ✅ 4. 시스템 통합 및 확장성 고려

// 📌 요구사항
// - `/api/images` 단일 엔드포인트로 통합 관리
// - 카테고리, 사용자 ID, 날짜 필터 등 재사용 가능한 구조 유지
// - 향후 메뉴 확장 시 별도 API 없이 통합 경로에서 처리 가능해야 함

// 🛠 작업 항목
// - [ ] 중복된 이미지 관련 라우터 정리 및 `/api/images`로 통합
// - [ ] query param 예시: `?category=mansak_img&user=10&limit=20`
// - [ ] 모든 기존 페이지(`/maternity-photo`, `/stickers`, `/gallery` 등) 프론트 코드 수정

// ⚠️ 추가 유의사항
// - 기존 Base64 이미지가 삭제되기 전까지는 fallback 로직을 유지 (`if base64 exists → 변환 후 저장 → 삭제`)
// - 이미지 DB 스키마(`images` 테이블)의 `title`, `transformedUrl` 등 필드 클린업 포함
// - 시스템 배포 전 전체 썸네일 생성 완료 필요 (스케쥴러 또는 수동 스크립트로)
