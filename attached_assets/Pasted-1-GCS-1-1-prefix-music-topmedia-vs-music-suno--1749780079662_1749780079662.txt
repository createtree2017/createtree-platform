1 GCS 저장 전략 - 세부 검토
1.1 오브젝트 네이밍·경로
엔진별 prefix 분리( music/topmedia/ vs music/suno/ )는 리스트·권한 제어에 유리하므로 적합합니다 
cloud.google.com
.

UUID + 확장자 구조도 권장 패턴이지만,

MP3는 audio/mpeg, 가사는 text/plain, 타임스탬프는 application/json Content-Type을 반드시 지정해야 브라우저/모바일 스트리밍 캐시가 정확히 동작합니다 
cloud.google.com
.

파일명에 공통 접미사(_lyrics.txt, _timestamp.json)를 붙이면 리스트-쿼리에서 prefix+suffix 검색이 간단해집니다 
cloud.google.com
.

1.2 Signed URL 정책
V4 Signed URL을 사용하신다면 HTTPS 전용으로 제한하고 만료 시간을 5–15 분 사이로 설정하면 보안·재생 호환성을 모두 확보할 수 있습니다 
cloud.google.com
cloud.google.com
.

오디오 스트리밍은 Range 요청을 많이 쓰므로 Content-Type·Accept-Ranges 헤더를 유지한 채 서명해야 하며, 프록시나 Cloud CDN을 추가할 경우 헤더 일치 여부를 검증하세요 
cloud.google.com
.

1.3 Lifecycle·버전 관리
무제한 저장 정책이라도 오래된 임시·실패 파일은 주기적으로 삭제해야 버킷 비용을 통제할 수 있습니다. GCS Lifecycle Rule 예시:

json
복사
편집
{ "rule":[{ "action":{"type":"Delete"}, "condition":{"age":30,"isLive":true} }]}
⇒ 30 일 후 삭제 
cloud.google.com
cloud.google.com
.

필요하면 버킷 Object Versioning을 켜 두고, 완성본 overwrite 시 자동 이전 버전을 저장할 수도 있습니다 
cloud.google.com
.

2 데이터베이스 확장
제안 필드	이유
gcs_path VARCHAR	객체 이동·CDN prefix 변경 시 URL 재생성이 쉬움
content_type VARCHAR(50)	MIME 식별 → 플레이어/다운로드 최적화
duration_sec INT	프런트 진행률·길이 필터 용이
INDEX(user_id, created_at)	사용량 통계·청구(향후)

GCS URL이 만료되면 재생성해야 하므로, Signed URL 대신 gcs_path를 저장하고 클라이언트 요청 시 새 URL을 생성하는 방식을 권장합니다 
cloud.google.com
.

3 서비스 코드·폴더 구조
3.1 공통 GCS 모듈
shared/gcs-base.ts 안에

uploadBuffer(), getSignedUrl(path, opts), addMetadata()

MIME 판단 mime.lookup() 자동 호출
를 넣어 Suno·TopMedia 구현에서 중복 코드 제거.

3.2 엔진 서비스
두 엔진 모두 Promise 기반 create() → poll() → saveToGCS() 인터페이스로 통일하면 팩토리에서 코드 스위칭이 간결해집니다.

Suno 타임스탬프 JSON은 크기가 작으므로 Lyrics와 함께 하나의 gzip JSON(_meta.json)으로 묶어 업로드하면 오브젝트 수를 1/2로 줄일 수 있습니다.

4 마이그레이션 / 운영 리스크
항목	주의점	대응
기존 객체 이동	GCS Rewrite API(same-bucket copy) 사용 시 속도 ≈ 1 GB/s 단일 쓰레드. 다량 객체면 Batch/Parallel 필요 
cloud.google.com
stackoverflow.com
gsutil -m mv gs://bucket/music/*.mp3 gs://bucket/music/topmedia/
리스트 일관성	GCS 객체 리스트는 일관성 보장이므로 이동 직후에도 prefix 검색이 안전 
cloud.google.com
cloud.google.com
작업 배치 끝에 DB update
동시 업로드	한 사용자 다중 요청 시 tmp 공간 RAM 과다 이슈 → 스트림 업로드 권장 
stackoverflow.com
uploadFromStream(readable)
권한 관리	엔진별 폴더 ACL 달리할 수 있음; 운영자는 전체, 트랜스코더 SA만 music/*/tmp/** 쓰기	IAM Condition으로 Prefix 제한

5 환경 변수·플래그
DEFAULT_ENGINE=suno ✅

Failure Fallback: ENGINE_FALLBACK_ORDER=suno,topmedia 처럼 배열로 지정하면 긴급 교체 시 yaml 1줄 수정으로 가능.

SIGNED_URL_TTL_SEC=900 → 모든 서비스 공통으로 사용.

6 추가 개선 제안 (비과금 영역)
Cache-Control 전략

완성 MP3 max-age=31536000, immutable 설정 → CDN Hit 향상 
simonhearne.com
.

Lyrics/JSON은 max-age=0, no-cache 권장.

Monitoring

Cloud Logging → Pub/Sub → Alert for upload errors, latency p95.

Prometheus exporter music_upload_seconds 등 삽입.

Unit Test

엔진별 Mock API + GCS fake로 uploadBuffer 동작 검증.

Migration 스크립트 테스트: list→rewrite→DB update dry-run.