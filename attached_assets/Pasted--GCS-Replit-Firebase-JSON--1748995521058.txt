📄 작업지시서: GCS 이미지 업로드 기능 (환경변수 기반 키 설정 방식)
✅ 목적
Replit 환경에서 줄바꿈 문제로 Firebase JSON 키 파일을 직접 불러오는 데 실패했기 때문에,
.env 환경변수로 키 내용을 전달하여 Firebase Admin SDK를 초기화하고,
이미지를 GCS에 업로드하는 API를 구현한다.

📌 1. .env에 아래 변수 추가
(대표님이 제공한 JSON 키를 기반으로)
private_key는 반드시 \\n 이스케이프 형식으로 줄바꿈 처리할 것

env
복사
편집
FB_TYPE=service_account
FB_PROJECT_ID=createtree
FB_PRIVATE_KEY_ID=5ae3581cc6a4ccdc012c18c0775fdd51614eee24
FB_PRIVATE_KEY="-----BEGIN PRIVATE KEY-----\\nMIIEvgIBADANBgkq...\\n-----END PRIVATE KEY-----\\n"
FB_CLIENT_EMAIL=upload-server@createtree.iam.gserviceaccount.com
FB_CLIENT_ID=115537304083050477734
FB_AUTH_URI=https://accounts.google.com/o/oauth2/auth
FB_TOKEN_URI=https://oauth2.googleapis.com/token
FB_AUTH_PROVIDER_X509_CERT_URL=https://www.googleapis.com/oauth2/v1/certs
FB_CLIENT_X509_CERT_URL=https://www.googleapis.com/robot/v1/metadata/x509/upload-server%40createtree.iam.gserviceaccount.com
📌 2. server/firebase.js 수정
ts
복사
편집
// server/firebase.js
import admin from 'firebase-admin';

const serviceAccount = {
  type: process.env.FB_TYPE,
  project_id: process.env.FB_PROJECT_ID,
  private_key_id: process.env.FB_PRIVATE_KEY_ID,
  private_key: process.env.FB_PRIVATE_KEY.replace(/\\n/g, '\n'),
  client_email: process.env.FB_CLIENT_EMAIL,
  client_id: process.env.FB_CLIENT_ID,
  auth_uri: process.env.FB_AUTH_URI,
  token_uri: process.env.FB_TOKEN_URI,
  auth_provider_x509_cert_url: process.env.FB_AUTH_PROVIDER_X509_CERT_URL,
  client_x509_cert_url: process.env.FB_CLIENT_X509_CERT_URL,
};

admin.initializeApp({
  credential: admin.credential.cert(serviceAccount),
  storageBucket: 'createtree-upload.appspot.com',
});

export const bucket = admin.storage().bucket();
📌 3. 이미지 업로드 라우터 그대로 유지
ts
복사
편집
// server/routes/upload.js (또는 .ts)
import express from 'express';
import multer from 'multer';
import fs from 'fs';
import path from 'path';
import { bucket } from '../firebase.js';

const router = express.Router();
const upload = multer({ dest: 'temp/' });

router.post('/upload', upload.single('file'), async (req, res) => {
  try {
    const userId = req.body.userId || 'anonymous';
    const file = req.file;
    const destination = `uploads/${userId}/${Date.now()}_${file.originalname}`;

    await bucket.upload(file.path, {
      destination,
      public: true,
      metadata: {
        contentType: file.mimetype,
      },
    });

    fs.unlinkSync(file.path);
    const publicUrl = `https://storage.googleapis.com/${bucket.name}/${destination}`;
    res.status(200).json({ url: publicUrl });
  } catch (err) {
    console.error('Upload error:', err);
    res.status(500).json({ error: 'Upload failed' });
  }
});

export default router;
📌 4. 테스트 방법
/upload API에 multipart/form-data로 file 업로드 요청 전송

응답으로 url 필드에 퍼블릭 이미지 주소가 반환되면 성공

