사용자가 TopMediai 엔진과 Suno 엔진 중 원하는 쪽을 직접 선택해 음악(＋가사) 생성을 실행하도록 하려면,
UI-컴포넌트 → 프런트 상태 관리 → 백엔드 서비스 팩토리 3단계를 일관되게 나눠 구현하면 됩니다.
아래에 UX 패턴, 프런트 구조, 백엔드 아키텍처, 오류-폴백을 순서대로 정리했습니다.

1 UX 구성 – “두 옵션 선택” 베스트 패턴
패턴	장점	사용 조건
세그먼티드 버튼 (탭형·토글형)	한 눈에 두 옵션이 보이고 1-클릭 전환. 모바일·데스크톱 모두 공간 효율 좋음
developer.apple.com
uxdesign.cc
2~3 개 상호배타 옵션일 때 권장
ux.stackexchange.com
uxdworld.com
라디오 버튼	키보드 접근성 우수, 구현 간단	화면 공간 여유 있고 선택 후 변경 드물 때
드롭다운	옵션이 4 개 이상·공간 협소 시	여기서는 2 개뿐이라 비추천
baymard.com

권장 UI : 상단에 “엔진 선택” 세그먼티드 버튼(TopMediai / Suno)을 배치해 즉시 전환.
접근성(ARIA role="tablist")과 현재 선택 상태만 명확히 표시하면 됩니다.

2 프런트 흐름
mermaid
복사
편집
flowchart TD
  A[엔진 세그먼티드 버튼] -->|선택 변경| B(setEngine)
  B --> C[폼 입력(prompt, etc.)]
  C --> |Submit| D(call /api/music?engine=<id>)
  D --> E[polling / socket for status]
  E --> F[가사 & 오디오 URL 도착 → 플레이어 렌더]
상태 관리 : React Context 혹은 Redux로 engine 전역 변수 유지

로딩 UI : 엔진별 진행률·큐웨이트 다르므로, 공통 스피너 + “엔진: TopMediai (estimate 30 s)” 식 메시지

3 백엔드 아키텍처 – “서비스 팩토리” 패턴
ts
복사
편집
// factory.ts
export type MusicEngine = 'topmedia' | 'suno';

export function getMusicService(engine: MusicEngine) {
  switch (engine) {
    case 'topmedia': return new TopmediaService();
    case 'suno':     return new SunoService();
  }
}

// controller.ts
export async function generateMusic(req, res) {
  const { engine, prompt } = req.body;            // engine = 'topmedia'|'suno'
  const svc = getMusicService(engine);
  const result = await svc.generate({ prompt });
  res.json(result);                               // { taskId, status }
}
3-1 TopMedia 구현 포인트
음악 : POST https://api.topmediai.com/v2/music 정상 동작 중
topmediai.com

가사 : 유지보수로 사용 불가(This function is under maintenance) →
is_auto:1 로 “가사 자동” 모드, 가사 없는 UI 대신 “가사 미제공” 메시지 처리
topmediai.com

3-2 Suno 구현 포인트
가사 생성 : POST /api/v1/lyrics/generate → taskId 반환
docs.sunoapi.org
docs.sunoapi.org

가사 상태 : GET /api/v1/lyrics/{taskId}/info 폴링 or 콜백 사용
docs.sunoapi.org

음악 생성 : POST /api/v1/music/generate (lyrics 주입 가능)
docs.sunoapi.org
docs.sunoapi.org

타임스탬프 가사 : POST /api/v1/music/get-timestamped-lyrics 선택 사용
docs.sunoapi.org

통일 인터페이스 예시

ts
복사
편집
// suno-service.ts
async generate({ prompt }: { prompt: string }) {
  const lyr = await createLyrics(prompt);          // 별도 함수
  const task = await createMusic({ prompt, lyrics: lyr.text });
  return { taskId: task.id, engine: 'suno' };
}
4 오류·폴백 전략
시나리오	처리
TopMedia 가사 API 장애	engine === 'topmedia' 선택 시 UI에 “가사 미제공 (API 점검 중)” 배지 노출
Suno 크레딧 소진	SunoService 내 429 또는 403 에러 감지 → 프런트로 errorCode: 'quota' 전달, 엔진 선택창으로 복귀
공통 네트워크 실패	백엔드에서 재시도 3회 후 502 반환, UI 토스트 “서버 지연, 다시 시도해 주세요”

5 도입 체크리스트
.env

ini
복사
편집
TOPMEDIA_API_KEY=...
SUNO_API_TOKEN=...
콜백 URL (Suno) : HTTPS - 인증 필요 없음, 200 응답 필수

크레딧 모니터링 : Suno GET /api/get_limit, TopMedia 별도 대시보드 확인

로그 저장 : engine, taskId, status, duration_ms → 장애 분석

