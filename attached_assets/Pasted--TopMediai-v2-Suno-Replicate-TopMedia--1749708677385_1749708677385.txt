## 🎯 TopMediai 통합 오류 – 라플 전용 **전면 수정 지시서 (v2)**

> **목적** : Suno/Replicate 잔재를 제거하고 TopMedia 전용으로 서버·DB·프론트를 재정렬하여 음악·가사 생성이 한번에 정상 완료 → DB 저장 → 재생까지 이어지도록 한다.

---

### 1️⃣ 엔드포인트 일원화

| 용도           | 최종 URL                                       | 메서드  | 비고                                         |
| ------------ | -------------------------------------------- | ---- | ------------------------------------------ |
| **가사 생성**    | `https://api.topmediai.com/v1/lyrics`        | POST | 현재 "under maintenance"·실패 시 GPT 대체로 즉시 전환  |
| **음악 제출**    | `https://api.topmediai.com/v2/submit`        | POST | 제출 응답 `{ id }` 수신                          |
| **음악 상태 조회** | `https://api.topmediai.com/v2/query?id=<id>` | GET  |  `status:"success"` 또는 `audio_url` 존재 시 완료 |

> 코드에 남아있는 `aimusic-api.topmediai.com`, `music-api.*` 등 **모두 삭제**

---

### 2️⃣ 요청 파라미터 (Basic)

```jsonc
{
  "prompt"       : "gentle lullaby for baby",   // 필수 (1‑200자)
  "model_version": "v4.0",                      // 'v4.0' · 'v3.5' · 'v3.0' 중 하나
  "instrumental" : 0,                           // 0 = 보컬 포함, 1 = 연주만
  "is_auto"      : 1                            // 1 = 멜로디 자동, 0 = 수동(가사 필요)
  // optional ↓
  "lyrics"       : "...",                      // 가사 직접 입력 시
  "gender"       : "female"                    // 보컬 성별
}
```

---

### 3️⃣ DB 스키마 동기화

| 필드            | 타입   | 기본값/제약       | 액션                                             |
| ------------- | ---- | ------------ | ---------------------------------------------- |
| `style`       | text | NULL 허용      | `ALTER TABLE music ALTER style DROP NOT NULL;` |
| `provider`    | text | `'topmedia'` | add if not exists                              |
| `status`      | text | `'pending'`  | add                                            |
| `credit_used` | int  | 0            | add                                            |

> **Drizzle** 스키마(`shared/schema.ts`)와 실제 DB 둘 다 동일하게 수정 후 `npm run db:push`.

---

### 4️⃣ 서비스 레이어 작업

#### a. `server/services/topmedia-service.ts` (신규/정비)

```ts
export async function submitTopMediaMusic(body){
  const { data } = await axios.post(SUBMIT_URL, body, hdr);
  return data?.data?.id; // id string
}
export async function pollTopMediaMusic(id){
  for(let i=0;i<40;i++){      // 120초 제한
    const { data } = await axios.get(`${QUERY_URL}?id=${id}`, hdr);
    if(data?.data?.audio_url){return data.data;}
    await sleep(3000);
  }
  throw new Error('TopMedia timeout');
}
```

#### b. `server/services/music-service.ts`

1. Suno/Replicate 분기 **전부 제거**
2. `generateMusic()` 로직을 TopMedia 전용으로 단순화 ▶ ① 가사 ⇒ Lyrics API 또는 GPT ② 음악 submit ▶ query ▶ audioUrl ③ DB insert.
3. 완료 감지 : `if (status==='success' || audio_url)` 즉시 저장.

---

### 4️⃣‑1 GCS 업로드 연동 (필수)

* **패키지** `@google-cloud/storage` 추가 — `npm i @google-cloud/storage`
* **환경변수**

  ```bash
  GCS_BUCKET_NAME=createtree-ai-music
  GOOGLE_APPLICATION_CREDENTIALS=/home/runner/secrets/gcs-sa.json
  ```
* **업로드 로직** (`topmedia-service.ts` 마지막 단계)

  ```ts
  import { Storage } from '@google-cloud/storage';
  const storage = new Storage();

  async function uploadToGCS(tmpFile: string, key: string) {
    const bucket = storage.bucket(process.env.GCS_BUCKET_NAME!);
    await bucket.upload(tmpFile, { destination: key, public: true });
    return `https://storage.googleapis.com/${process.env.GCS_BUCKET_NAME}/${key}`;
  }

  // … 기존 TopMediai 완료 처리 이후
  const localPath = await downloadAudio(topMediaAudioUrl); // temp mp3
  const gcsKey    = `music/${songId}.mp3`;
  const gcsUrl    = await uploadToGCS(localPath, gcsKey);
  await db.insert(music).values({ ...insertData, audio_url: gcsUrl });
  fs.unlinkSync(localPath);
  ```
* **DB** `audio_url` 필드에는 **GCS URL** 저장 → 프론트는 이 URL 직재생
* **버킷 권한** : 퍼블릭 `allUsers:objectViewer` 또는 Cloud CDN Signed‑URL 사용 중 하나 선택

---

### 5️⃣ 프론트엔드 수정 프론트엔드 수정

* `client/src/components/music/MusicForm.tsx`

  * hidden `provider="topmedia"`
  * `style` 드롭다운 추가 (lullaby, pop, jazz…)
* Suno 메뉴·페이지 링크 **전부 삭제**

---

### 6️⃣ 환경변수

```
TOPMEDIA_API_KEY=xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
```

대체 키 필요 없음 – 현재 키 정상.

---

### 7️⃣ 가사 API 폴백 로직

```ts
try{ await axios.post(LYRICS_URL, {prompt}, hdr) }
catch{ lyrics = await gptGenerateLyrics(prompt); }
```

---

### 8️⃣ 테스트 시나리오 (⏱ 5분 이내 통과)

1. `npm run dev` – 컴파일 에러 0.
2. **POST** `/api/music/create` (프롬프트 "테스트 자장가") ▶ 응답 200.
3. 서버 로그 ‑ `TopMedia submit id=…` → `audio_url=https://…mp3` 120 s 이내 출력.
4. DB `music` 레코드 : `provider='topmedia'`, `status='done'`, `audio_url` 채워짐.
5. 프론트 재생 버튼 ▶ 정상 플레이.

---

### 9️⃣ 라플 작업 순서 요약

```bash
# 0. Suno/Replicate 파일 삭제·백업
# 1. env 키 확인
# 2. schema.ts + 마이그레이션 실행
# 3. topmedia-service.ts 구현
# 4. music-service.ts 리팩토링
# 5. 프론트 폼/라우팅 정리
# 6. npm run dev && 통합 테스트
```

> ⚠️ **Commit 전 `npx eslint . --fix && npx tsc -p .` 반드시 통과**

---

### ✅ 작업 결과 보고 체크리스트

* [ ] Suno 관련 파일 전부 삭제/백업 스크린샷
* [ ] DB 마이그레이션 로그
* [ ] `audio_url` 포함 TopMedia 최종 응답 JSON
* [ ] 프론트에서 재생되는 확인 GIF

이 문서대로 완료 후 “**TopMedia v2 통합 완료**” 라벨 달아 Slack #dev 로 공유 바랍니다.
