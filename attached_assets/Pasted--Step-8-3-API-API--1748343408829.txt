✅ Step 8.3 - API 연동 점검 체크리스트 및 라플이 종합 테스트 지시서

🎯 목적:
현재까지 구축된 전체 기능을 대상으로 API 연동 상태, 라우트 보호, 인증/권한 검증, 프론트-백 데이터 매칭을 종합적으로 테스트하고 보완점을 찾기 위한 개발자 점검 지침서입니다.

---

✅ 1. 인증 및 권한 기반 API 테스트

| API | 보호 미들웨어 | 확인 사항 |
|------|----------------|-----------|
| GET /api/auth/me | requireAuth | JWT 쿠키 없을 때 401 반환되는가? |
| GET /admin/users | requireAdminOrSuperAdmin | 일반 유저 접근 시 403 발생하는가? |
| GET /hospital/campaigns | requireHospitalAdmin | 다른 병원 ID 접근 시 차단되는가? |
| GET /admin/hospitals | requireAdminOrSuperAdmin | hospital_admin 접근 시 차단되는가? |
| PATCH /admin/users/:id/role | requireAdminOrSuperAdmin | admin이 superadmin 변경 불가 여부 적용됨? |

---

✅ 2. 프론트-백 연동 체크 항목 (라우팅, 렌더링, 쿼리 반응)

🧪 UI 요소가 다음 조건에 따라 실제 데이터를 반영하는지 테스트:

| 페이지 | 데이터 쿼리 키 | 보완 포인트 |
|--------|----------------|--------------|
| /admin/users | ['admin-users'] | 등급 변경 후 목록 반영되는가? |
| /admin/hospitals | ['admin-hospitals'] | 등록 후 바로 목록에 나타나는가? 삭제 후 반영? |
| /hospital/dashboard | hospitalId 기반 캠페인 필터 작동 여부 | 병원 이름 상단 표시 여부 |
| /campaigns | ['user-campaigns'] | 신청 가능 여부, 상태 필터 반응 여부 |

---

✅ 3. 이미지 생성 기능 연동 검증

| 항목 | 점검 사항 |
|------|------------|
| POST /api/image/transform | 로그인 필요 여부 확인 (401 체크) |
| 생성된 이미지 → DB 저장되는가? | userId가 포함되어 저장되는가? |
| 사용자 갤러리 페이지 | 본인의 이미지만 필터링되는가? |
| 병원 관리자 계정 | 이미지 생성 제한 없음 여부 확인 필요 |

---

✅ 4. 후기 등록 및 후기 선정 API 연동 점검

| API | 점검 항목 |
|------|------------|
| POST /api/reviews | 캠페인 선택 후 URL 제출 시 DB 반영 확인 |
| GET /hospital/reviews | hospitalId 기준 필터링 되는가? |
| PATCH /hospital/reviews/:id/select | 후기 선정 상태 반영됨? 리로딩 되는가? |

---

✅ 5. 캠페인 신청 API와 신청자 확인 연동 점검

| API | 점검 항목 |
|------|------------|
| POST /api/campaign-applications | 중복 신청 방지 로직 작동 여부 |
| GET /hospital/campaign-applications | 캠페인ID별 신청자만 반환되는가? |
| 병원관리자 외 접근 시 | 403 차단 확인 |

---

✅ 6. 테스트 방법 요약
- F12 → Network 탭으로 요청 확인
- 쿠키(`auth_token`) 포함 여부 확인
- React Query 사용 시 → `queryKey` / `invalidateQueries` 정상 작동 여부 확인
- console.log 추가해서 req.user, hospitalId 확인

---

📌 결론:
본 체크리스트를 기반으로 모든 기능을 실제 사용자 흐름으로 전수 테스트하십시오. 
테스트 도중 발견되는 모든 오류는 Step 8.4 패치 작업 항목으로 분류하여 별도 지시서를 생성하게 됩니다.

🛠️ 테스트 완료되면 그 결과를 기준으로 리팩토링 및 자동화 테스트 기반 시스템 개선도 가능합니다.