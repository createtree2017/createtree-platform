✅ [라플이 전용] GPT-4o + Responses API 모델 변경 작업지시서
작업 목적: 기존 수작업 프롬프트 조립 방식 → GPT-4o Responses API 기반 자동화 방식으로 전환

🧩 1. 개요
기존 방식은 사용자가 올린 이미지에 대해 style + variables를 조합해 직접 프롬프트를 작성한 후 gpt-image-1 호출

하지만, 얼굴 유사도 및 자연스러운 문장 구조가 부족했음

이를 해결하기 위해 OpenAI의 GPT-4o + Responses API를 도입하여 자동화된 프롬프트 생성 구조로 전환함

⚙️ 2. 작업 흐름 요약
css
복사
편집
[사용자 이미지 업로드 + 스타일 + 변수]
   ↓
[GPT-4o Responses API 호출]
   → 이미지 분석 + 스타일/변수 반영 + 영어 프롬프트 자동 생성
   ↓
[gpt-image-1 호출]
   → 이미지 생성 결과 base64로 수신
   ↓
[GCS 업로드 + DB 저장 + 프론트 전달]
🧾 3. API Key / 환경 정보
항목	내용
API Key	sk-proj-xxxxxxxxxxxxxxxxx 형식 (✅ Responses API 사용 가능 확인됨)
Project 상태	Playground에서 Responses API 선택 가능 (활성화 확인 완료)
사용 모델	gpt-4o + gpt-image-1
기능 활성화	GPT-4o, Vision, Assistants API 모두 Enable 상태

📥 4. 입력값 명세
API 엔드포인트: POST /api/images/gpt4o-agent

요청 형식: multipart/form-data

전달 데이터:

필드	형식	설명
file	image	사용자 사진 (Buffer)
styleId	string	예: "ghibli-watercolor"
variables	stringified JSON	예: {"nickname": "콩알이", "dueDate": "2025-09-01"}

🧠 5. GPT-4o Responses API 요청 방식
ts
복사
편집
// requestGpt4oAgent.ts
export async function requestGpt4oAgent(imageBuffer: Buffer, styleText: string, variables: Record<string, string>): Promise<string> {
  const form = new FormData();

  // 파일 업로드
  form.append("image", imageBuffer, "user.png");

  // 프롬프트 지시어 구성
  const variableText = Object.entries(variables)
    .map(([key, val]) => `- ${key}: ${val}`)
    .join("\\n");

  const instructions = `이 인물의 특징을 반영해 gpt-image-1에 전달할 영어 프롬프트를 만들어줘:\\n스타일: ${styleText}\\n변수:\\n${variableText}`;

  form.append("instructions", instructions);

  const response = await fetch("https://api.openai.com/v1/threads/THREAD_ID/runs", {
    method: "POST",
    headers: {
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: form,
  });

  const result = await response.json();
  return result?.prompt || "";
}
❗ 참고: 실제 운영 시 THREAD_ID는 사전 생성 or 임시 thread 생성부터 이어지는 구조로 개발 가능

🖼️ 6. 이미지 생성 처리 (generateImage.ts)
ts
복사
편집
export async function generateImage(prompt: string): Promise<string[]> {
  const response = await fetch("https://api.openai.com/v1/images/generations", {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
    },
    body: JSON.stringify({
      model: "gpt-image-1",
      prompt,
      n: 1,
      size: "1024x1024",
      response_format: "b64_json",
    }),
  });

  const result = await response.json();
  return result.data.map((item: any) => `data:image/png;base64,${item.b64_json}`);
}
