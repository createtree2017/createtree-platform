✅ [라플이 작업지시서]
JWT-only 인증 기반 회원 시스템 리팩토링 + 사용자 등급 로직 + 이미지 갤러리 필터링 연동 전체 개선

🧭 목표
JWT 단일 인증 체계로 전환

회원가입 방식에 따라 등급 자동 설정

userId 기반으로 모든 갤러리/API 접근 필터링 정비

향후 확장 가능한 인증 구조로 표준화

🧩 전체 시스템 구조 개선 순서 (5단계)
단계	주요 작업	작업 코드 위치
1단계	JWT 단일 인증 구조로 통일	auth.ts, google-oauth.ts, auth/me
2단계	회원가입 방식에 따라 memberType 자동 설정	auth.ts, users.insert()
3단계	/api/auth/me 응답 정비 (JWT 기반)	auth.ts
4단계	req.user.id 기반으로 모든 API 인증 통일	image, review, campaign 관련 라우터
5단계	마이페이지에서 등급 업그레이드 로직 연결	추후 user/update.ts, upgrade.ts 등

✅ [1단계] JWT-only 인증 구조
🔧 작업 내용:
기존 세션(req.session.userId) 제거

JWT 생성 후 쿠키로 저장

미들웨어에서 JWT만 검사하고 req.user 설정

🔐 인증 미들웨어 예시 (server/middleware/auth.ts):
ts
복사
편집
import jwt from "jsonwebtoken";

export function requireAuth(req, res, next) {
  const token = req.cookies?.auth_token;
  if (!token) return res.status(401).json({ error: "인증 실패" });

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    req.user = decoded; // req.user.id, req.user.email 사용 가능
    next();
  } catch (err) {
    return res.status(401).json({ error: "토큰 만료 또는 유효하지 않음" });
  }
}
✅ [2단계] 회원가입 방식에 따른 등급 분기
🔧 일반 회원가입:
ts
복사
편집
await db.insert(users).values({
  email,
  passwordHash,
  name,
  memberType: "pro", // 일반회원은 기본값 pro
});
🔧 구글 로그인:
ts
복사
편집
if (!existingUser) {
  await db.insert(users).values({
    email: googleUser.email,
    name: googleUser.name,
    firebaseUid: googleUser.id,
    memberType: "free", // 구글 가입자는 free
  });
}
✅ [3단계] /api/auth/me 응답 정비
ts
복사
편집
router.get("/api/auth/me", requireAuth, async (req, res) => {
  const user = await db.query.users.findFirst({
    where: eq(users.id, req.user.id),
  });
  res.json({
    userId: user.id,
    email: user.email,
    name: user.name,
    memberType: user.memberType,
  });
});
✅ 캐시 없이 항상 최신 사용자 정보 제공

✅ [4단계] 모든 API 인증 방식 통일
🔧 예시: 이미지 생성 갤러리 필터링
ts
복사
편집
router.get("/api/images/category/:category", requireAuth, async (req, res) => {
  const userId = req.user.id;
  const category = req.params.category;

  const images = await db.select().from(images)
    .where(and(eq(images.userId, userId), eq(images.category, category)));
  res.json(images);
});
기존 req.session.userId → req.user.id로 모두 통일

✅ [5단계] 마이페이지 등급 업그레이드 연동
🔧 마이페이지에서 POST /api/user/upgrade API 호출 시
ts
복사
편집
router.post("/api/user/upgrade", requireAuth, async (req, res) => {
  const { memberType } = req.body;

  await db.update(users)
    .set({ memberType })
    .where(eq(users.id, req.user.id));

  res.json({ success: true });
});
프론트엔드에서 등급 선택 및 조건 통과 시 호출

📋 단계별 체크리스트
항목	완료 여부
JWT-only 인증 미들웨어 도입	⬜
세션 코드 제거	⬜
구글 로그인 → free 등급 가입 설정	⬜
일반 회원가입 → pro 또는 membership 등급 설정	⬜
/api/auth/me JWT 기준 응답 통일	⬜
모든 API 라우트에서 req.user.id 사용 확인	⬜
갤러리, 후기, 캠페인 API에서 userId 필터 적용	⬜
마이페이지 등급 업그레이드 API 생성	⬜

✅ 라플이에게 줄 최종 작업지시 요약 (코드 통합)
plaintext
복사
편집
📌 JWT-only 인증 구조로 전환

1. 기존 세션 기반 인증 제거
2. middleware/auth.ts에 JWT 기반 requireAuth() 미들웨어 구현
3. 모든 API 인증 라우트에 requireAuth() 적용하고 req.user.id 사용
4. 구글 로그인 시 memberType = "free", 일반회원가입 시 = "pro"
5. /api/auth/me API를 JWT 기준으로 재구성하여 항상 사용자 정보 반환
6. 이미지 갤러리, 후기, 캠페인, 음악 등 모든 리소스 API에서 req.user.id 기반 필터링으로 통일
7. 마이페이지에서 memberType 변경 가능한 upgrade API 생성 (/api/user/upgrade)

🔥 유의사항:
- 세션 제거 시 logout/redirect 흐름에서 쿠키 초기화도 같이 반영
- 모든 필터링 로직에 userId 누락 여부 재확인