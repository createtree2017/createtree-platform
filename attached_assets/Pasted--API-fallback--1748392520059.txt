// 📦 작업지시서: 기존 이미지 썸네일 생성 + API 안정화 + 클라이언트 fallback 처리

// 🎯 문제 요약
// - 기존 이미지에 썸네일이 없어서 원본 이미지를 그대로 로딩 중 (매우 느림)
// - 썸네일 필드 접근 시 null 값으로 인해 API에서 500 오류 발생
// - 클라이언트는 썸네일 유무와 관계없이 모든 이미지를 동일하게 처리하고 있어, 로딩 지연 및 오류 발생


// ✅ 목표
// 1. 기존 이미지들에 대해 썸네일을 생성하고 DB에 저장
// 2. API 응답 시 thumbnailUrl이 없으면 originalUrl로 대체(fallback)
// 3. 클라이언트에서 이미지 로딩 실패 시 대체 이미지로 처리


// ✅ 1단계: 서버에서 기존 이미지 전체에 대해 썸네일 생성 스크립트 작성

// 📁 server/scripts/generate-thumbnails.ts (새 파일)
// 순서:
// - uploads/ 폴더의 모든 이미지 파일 확인
// - 썸네일이 없는 경우 thumbnails/ 폴더에 300x300 사이즈로 생성
// - DB.images 테이블의 thumbnail_url 필드도 업데이트

// 예시 코드:
import fs from 'fs';
import path from 'path';
import sharp from 'sharp';
import { db } from '../db';

const uploadsPath = path.join(process.cwd(), 'uploads');
const thumbnailsPath = path.join(uploadsPath, 'thumbnails');

async function generateThumbnails() {
  const images = await db.images.findMany();

  for (const image of images) {
    if (!image.original_url) continue;
    const filename = path.basename(image.original_url);
    const thumbnailFile = path.join(thumbnailsPath, filename);

    if (!fs.existsSync(thumbnailFile)) {
      await sharp(path.join(uploadsPath, filename))
        .resize(300, 300)
        .toFile(thumbnailFile);
    }

    await db.images.update({
      where: { id: image.id },
      data: { thumbnail_url: `/uploads/thumbnails/${filename}` },
    });
  }
  console.log('✅ 모든 썸네일 생성 완료');
}

generateThumbnails();


// ✅ 2단계: API 응답에서 썸네일이 없으면 originalUrl 사용하도록 fallback 처리

// server/routes.ts
const url = image.thumbnail_url ?? image.original_url;
res.json({ ...image, url });


// ✅ 3단계: 클라이언트에서 이미지 로딩 실패 시 대체 처리
// gallery-simplified.tsx, maternity-photo.tsx 등

<img
  src={image.url}
  alt={image.title}
  onError={(e) => {
    e.currentTarget.src = '/static/fallback-thumbnail.jpg';
  }}
  loading="lazy"
  width="300"
/>


// ✅ 테스트 항목
// - [ ] 서버 실행 후 모든 uploads 파일에 thumbnails 생성됨
// - [ ] DB의 thumbnail_url 필드가 채워짐
// - [ ] 썸네일이 없던 이미지도 빠르게 로딩됨
// - [ ] 500 오류 사라짐
// - [ ] 이미지가 깨졌을 경우 fallback 이미지가 나타남


// 🔐 이 작업은 사이트 전체 UX 개선에 매우 중요하며, 초기 성능 인식에 결정적인 역할을 하므로 반드시 우선 적용할 것