// ✅ Step 1. GCS 파일을 music 테이블과 자동 연결하여 gcs_path + url 필드 갱신

import { db } from "../../shared/database";
import { music } from "../../shared/schema";
import { and, eq } from "drizzle-orm";
import { Storage } from "@google-cloud/storage";

const storage = new Storage();
const bucket = storage.bucket("createtree-upload");
const prefix = "music/";

async function syncGcsMusicToDb() {
  const [files] = await bucket.getFiles({ prefix });

  const dbRecords = await db
    .select({ id: music.id, createdAt: music.created_at })
    .from(music)
    .where(eq(music.status, "completed"));

  for (const file of files) {
    const fileName = file.name.replace(prefix, "");
    const [metadata] = await file.getMetadata();
    const gcsTime = new Date(metadata.timeCreated);

    // created_at과 가장 비슷한 레코드 찾기
    let matchedId = null;
    let minDiff = Infinity;

    for (const rec of dbRecords) {
      const diff = Math.abs(new Date(rec.createdAt).getTime() - gcsTime.getTime());
      if (diff < 60000 && diff < minDiff) { // 60초 이내 유사한 경우만 허용
        minDiff = diff;
        matchedId = rec.id;
      }
    }

    if (matchedId) {
      const gcsUrl = `https://storage.googleapis.com/createtree-upload/${file.name}`;
      await db
        .update(music)
        .set({ gcs_path: fileName, url: gcsUrl })
        .where(eq(music.id, matchedId));
      console.log(`✅ Updated music ID ${matchedId} → ${fileName}`);
    } else {
      console.log(`⚠️  No match for file: ${fileName}`);
    }
  }
}

// ✅ Step 2. 음악 생성 직후 GCS 업로드 후 DB에 url 및 gcs_path 저장 함수
export async function saveMusicToDb(musicId: number, gcsFileName: string) {
  const gcsUrl = `https://storage.googleapis.com/createtree-upload/music/${gcsFileName}`;
  await db.update(music)
    .set({ gcs_path: gcsFileName, url: gcsUrl })
    .where(eq(music.id, musicId));
  console.log(`🎵 Music DB Updated → ID: ${musicId}, URL: ${gcsUrl}`);
}

syncGcsMusicToDb().then(() => console.log("🎯 DB 동기화 완료")).catch(console.error);
