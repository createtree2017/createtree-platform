/**
 * GCS ÏùåÏïÖ ÌååÏùºÏùÑ Î°úÏª¨ static Ìè¥ÎçîÎ°ú Îã§Ïö¥Î°úÎìú
 * Î∏åÎùºÏö∞Ï†Ä ÏßÅÏ†ë Ï†ëÍ∑ºÏùÑ ÏúÑÌïú Î°úÏª¨ ÌååÏùº ÏÉùÏÑ±
 */

import { db } from "./db/index.js";
import { music } from "./shared/schema.js";
import { eq } from "drizzle-orm";
import fs from 'fs';
import path from 'path';

async function downloadMusicToStatic() {
  console.log('üéµ ÏùåÏïÖ ÌååÏùº Î°úÏª¨ Îã§Ïö¥Î°úÎìú ÏãúÏûë...');
  
  try {
    // static/music ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±
    const musicDir = './static/music';
    if (!fs.existsSync(musicDir)) {
      fs.mkdirSync(musicDir, { recursive: true });
      console.log(`üìÅ ÎîîÎ†âÌÜ†Î¶¨ ÏÉùÏÑ±: ${musicDir}`);
    }
    
    // DBÏóêÏÑú Î™®Îì† ÏôÑÎ£åÎêú GCS ÏùåÏïÖ Ï°∞Ìöå
    const musicList = await db.query.music.findMany({
      where: (music, { and, eq, like, isNotNull, ne }) => and(
        eq(music.status, 'completed'),
        isNotNull(music.url),
        ne(music.url, ''),
        like(music.url, '%storage.%google%')
      ),
      orderBy: (music, { desc }) => desc(music.id)
    });
    
    console.log(`üìã Ï¥ù ${musicList.length}Í∞úÏùò ÏùåÏïÖ ÌååÏùº Îã§Ïö¥Î°úÎìú ÎåÄÏÉÅ`);
    
    for (const musicRecord of musicList) {
      try {
        console.log(`\nüéµ Ï≤òÎ¶¨ Ï§ë: ID=${musicRecord.id}, Ï†úÎ™©=${musicRecord.title}`);
        
        // URLÏóêÏÑú ÌååÏùºÎ™Ö Ï∂îÏ∂ú
        const urlParts = musicRecord.url.split('/');
        const fileName = urlParts[urlParts.length - 1];
        const localPath = path.join(musicDir, fileName);
        
        console.log(`üìÅ Ï†ÄÏû• Í≤ΩÎ°ú: ${localPath}`);
        
        // Ïù¥ÎØ∏ ÌååÏùºÏù¥ ÏûàÏúºÎ©¥ Ïä§ÌÇµ
        if (fs.existsSync(localPath)) {
          console.log(`‚úÖ ÌååÏùºÏù¥ Ïù¥ÎØ∏ Ï°¥Ïû¨Ìï®: ${fileName}`);
          
          // DB URLÏùÑ Î°úÏª¨ Í≤ΩÎ°úÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
          const staticUrl = `/static/music/${fileName}`;
          await db.update(music)
            .set({ 
              url: staticUrl,
              updatedAt: new Date()
            })
            .where(eq(music.id, musicRecord.id));
          
          console.log(`‚úÖ DB URL ÏóÖÎç∞Ïù¥Ìä∏: ${staticUrl}`);
          continue;
        }
        
        console.log(`‚¨áÔ∏è Îã§Ïö¥Î°úÎìú ÏãúÏûë: ${musicRecord.url}`);
        
        // GCSÏóêÏÑú ÌååÏùº Îã§Ïö¥Î°úÎìú (Ïù∏Ï¶ù ÏóÜÏù¥ ÏãúÎèÑ)
        const response = await fetch(musicRecord.url);
        
        if (response.ok && response.body) {
          const buffer = await response.arrayBuffer();
          fs.writeFileSync(localPath, Buffer.from(buffer));
          
          const fileSizeKB = Math.round(buffer.byteLength / 1024);
          console.log(`‚úÖ Îã§Ïö¥Î°úÎìú ÏôÑÎ£å: ${fileName} (${fileSizeKB}KB)`);
          
          // DB URLÏùÑ Î°úÏª¨ Í≤ΩÎ°úÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
          const staticUrl = `/static/music/${fileName}`;
          await db.update(music)
            .set({ 
              url: staticUrl,
              updatedAt: new Date()
            })
            .where(eq(music.id, musicRecord.id));
          
          console.log(`‚úÖ DB URL ÏóÖÎç∞Ïù¥Ìä∏: ${staticUrl}`);
          
        } else {
          console.log(`‚ùå Îã§Ïö¥Î°úÎìú Ïã§Ìå®: ${response.status} ${response.statusText}`);
          
          // ÏùëÎãµÏù¥ HTMLÏù∏ÏßÄ ÌôïÏù∏ (Google Î°úÍ∑∏Ïù∏ ÌéòÏù¥ÏßÄ)
          const contentType = response.headers.get('content-type');
          if (contentType && contentType.includes('text/html')) {
            console.log(`‚ùå Google Ïù∏Ï¶ù ÌéòÏù¥ÏßÄ Î∞òÌôòÎê®, ÌååÏùº Ï†ëÍ∑º Î∂àÍ∞Ä`);
          }
        }
        
      } catch (error) {
        console.error(`‚ùå ÌååÏùº Ï≤òÎ¶¨ Ïò§Î•ò (ID: ${musicRecord.id}):`, error);
      }
    }
    
    console.log('\nüéâ ÏùåÏïÖ ÌååÏùº Îã§Ïö¥Î°úÎìú ÏûëÏóÖ ÏôÑÎ£å!');
    
    // Îã§Ïö¥Î°úÎìúÎêú ÌååÏùº Î™©Î°ù ÌôïÏù∏
    if (fs.existsSync(musicDir)) {
      const files = fs.readdirSync(musicDir);
      console.log(`üìÅ Î°úÏª¨ ÏùåÏïÖ ÌååÏùº: ${files.length}Í∞ú`);
      files.forEach(file => {
        const filePath = path.join(musicDir, file);
        const stats = fs.statSync(filePath);
        const sizeKB = Math.round(stats.size / 1024);
        console.log(`  - ${file} (${sizeKB}KB)`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå Ï†ÑÏ≤¥ Ï≤òÎ¶¨ Ïò§Î•ò:', error);
  }
}

downloadMusicToStatic();