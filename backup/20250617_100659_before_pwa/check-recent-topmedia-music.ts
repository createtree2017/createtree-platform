/**
 * ÏµúÍ∑º TopMediai ÏùåÏïÖÏùò Ïô∏Î∂Ä ID ÌôïÏù∏
 */

import { db } from './db/index.js';
import { music } from './shared/schema.js';
import { desc, eq } from 'drizzle-orm';
import axios from 'axios';

const API_BASE_URL = 'https://api.topmediai.com';
const API_KEY = process.env.TOPMEDIA_API_KEY;

const axiosConfig = {
  headers: {
    'x-api-key': API_KEY,
    'Content-Type': 'application/json'
  },
  timeout: 10000
};

async function checkRecentTopMediaiMusic() {
  console.log('üìä ÏµúÍ∑º TopMediai ÏùåÏïÖ ÌôïÏù∏ Î∞è Í∞ÄÏÇ¨ Ï∂îÏ∂ú ÌÖåÏä§Ìä∏');
  
  try {
    // ÏµúÍ∑º TopMediai ÏùåÏïÖ Ï°∞Ìöå
    const recentMusic = await db.query.music.findMany({
      where: eq(music.engine, 'topmedia'),
      orderBy: desc(music.createdAt),
      limit: 10
    });
    
    console.log(`\nÎ∞úÍ≤¨Îêú TopMediai ÏùåÏïÖ: ${recentMusic.length}Í∞ú`);
    
    for (const [index, musicRecord] of recentMusic.entries()) {
      console.log(`\n${index + 1}. ÏùåÏïÖ Ï†ïÎ≥¥:`);
      console.log(`   ID: ${musicRecord.id}`);
      console.log(`   Ï†úÎ™©: ${musicRecord.title}`);
      console.log(`   Ïô∏Î∂ÄID: ${musicRecord.externalId}`);
      console.log(`   ÏÉÅÌÉú: ${musicRecord.status}`);
      console.log(`   Í∞ÄÏÇ¨: ${musicRecord.lyrics ? 'ÏûàÏùå' : 'ÏóÜÏùå'}`);
      console.log(`   ÏÉùÏÑ±Ïùº: ${musicRecord.createdAt}`);
      
      // ÏôÑÎ£åÎêú ÏùåÏïÖÏù¥Í≥† Ïô∏Î∂Ä IDÍ∞Ä ÏûàÏúºÎ©¥ Í∞ÄÏÇ¨ ÌôïÏù∏
      if (musicRecord.status === 'completed' && musicRecord.externalId) {
        console.log(`\n   üîç Ïô∏Î∂Ä IDÎ°ú Í∞ÄÏÇ¨ ÌôïÏù∏ Ï§ë: ${musicRecord.externalId}`);
        
        try {
          const response = await axios.get(
            `${API_BASE_URL}/v2/query?song_id=${musicRecord.externalId}`, 
            axiosConfig
          );
          
          const responseData = response.data;
          console.log(`   ‚úÖ API ÏùëÎãµ Î∞õÏùå (${response.status})`);
          
          // ÏùëÎãµ Íµ¨Ï°∞ Î∂ÑÏÑù
          console.log(`   üìã ÏµúÏÉÅÏúÑ ÌïÑÎìú: ${Object.keys(responseData).join(', ')}`);
          
          if (responseData.data && Array.isArray(responseData.data)) {
            console.log(`   üìã data Î∞∞Ïó¥ Í∏∏Ïù¥: ${responseData.data.length}`);
            
            responseData.data.forEach((item: any, itemIndex: number) => {
              console.log(`   üìã data[${itemIndex}] ÌïÑÎìú: ${Object.keys(item).join(', ')}`);
              
              // Í∞ÄÏÇ¨ Í¥ÄÎ†® ÌïÑÎìú ÌôïÏù∏
              const lyricsFields = ['lyrics', 'lyric', 'text', 'content', 'prompt_text', 'description'];
              let foundLyrics = false;
              
              for (const field of lyricsFields) {
                if (item[field] && typeof item[field] === 'string' && item[field].length > 10) {
                  console.log(`   ‚úÖ Í∞ÄÏÇ¨ Î∞úÍ≤¨! ÌïÑÎìú: ${field}`);
                  console.log(`   üìù Í∞ÄÏÇ¨ ÎÇ¥Ïö© (Ï≤´ 100Ïûê): "${item[field].substring(0, 100)}..."`);
                  foundLyrics = true;
                  
                  // Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Í∞ÄÏÇ¨Í∞Ä ÏóÜÏúºÎ©¥ ÏóÖÎç∞Ïù¥Ìä∏
                  if (!musicRecord.lyrics) {
                    console.log(`   üíæ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Í∞ÄÏÇ¨ Ï†ÄÏû• Ï§ë...`);
                    try {
                      await db.update(music)
                        .set({ lyrics: item[field] })
                        .where(eq(music.id, musicRecord.id));
                      console.log(`   ‚úÖ Í∞ÄÏÇ¨ Ï†ÄÏû• ÏôÑÎ£å`);
                    } catch (dbError) {
                      console.log(`   ‚ùå Í∞ÄÏÇ¨ Ï†ÄÏû• Ïã§Ìå®:`, dbError);
                    }
                  }
                  break;
                }
              }
              
              if (!foundLyrics) {
                console.log(`   ‚ùå data[${itemIndex}]ÏóêÏÑú Í∞ÄÏÇ¨Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå`);
              }
            });
          } else {
            console.log(`   ‚ùå data Î∞∞Ïó¥Ïù¥ ÏóÜÍ±∞ÎÇò ÎπÑÏñ¥ÏûàÏùå`);
          }
          
          // Ï†ÑÏ≤¥ ÏùëÎãµÏùÑ Î°úÍ∑∏Î°ú Ï∂úÎ†• (ÎîîÎ≤ÑÍπÖÏö©)
          console.log(`   üîç Ï†ÑÏ≤¥ ÏùëÎãµ (Ï≤òÏùå 500Ïûê): ${JSON.stringify(responseData).substring(0, 500)}...`);
          
        } catch (apiError: any) {
          console.log(`   ‚ùå API Ìò∏Ï∂ú Ïã§Ìå®: ${apiError.response?.status || apiError.message}`);
          if (apiError.response?.data) {
            console.log(`   üìã ÏóêÎü¨ ÏùëÎãµ: ${JSON.stringify(apiError.response.data)}`);
          }
        }
      } else {
        console.log(`   ‚è≠Ô∏è Í±¥ÎÑàÎúÄ (ÏÉÅÌÉú: ${musicRecord.status}, Ïô∏Î∂ÄID: ${musicRecord.externalId || 'ÏóÜÏùå'})`);
      }
    }
    
    console.log('\nüìä ÏöîÏïΩ:');
    console.log(`- Ï†ÑÏ≤¥ TopMediai ÏùåÏïÖ: ${recentMusic.length}Í∞ú`);
    console.log(`- ÏôÑÎ£åÎêú ÏùåÏïÖ: ${recentMusic.filter(m => m.status === 'completed').length}Í∞ú`);
    console.log(`- Í∞ÄÏÇ¨Í∞Ä ÏûàÎäî ÏùåÏïÖ: ${recentMusic.filter(m => m.lyrics).length}Í∞ú`);
    console.log(`- Ïô∏Î∂Ä IDÍ∞Ä ÏûàÎäî ÏùåÏïÖ: ${recentMusic.filter(m => m.externalId).length}Í∞ú`);
    
  } catch (error) {
    console.error('‚ùå Ïã§Ìñâ Ïò§Î•ò:', error);
  }
}

checkRecentTopMediaiMusic().catch(console.error);